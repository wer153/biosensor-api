services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: biosensor
      POSTGRES_USER: biosensor_user
      POSTGRES_PASSWORD: biosensor_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U biosensor_user -d biosensor"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@biosensor.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_DISABLE_POSTFIX: "true"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db

  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      DATABASE_URL: postgresql+asyncpg://biosensor_user:biosensor_pass@db:5432/biosensor
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      
      # AWS Configuration (for testing - use dummy values)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-test-access-key-id}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-test-secret-access-key}
      AWS_REGION: ${AWS_REGION:-ap-northeast-2}
      
      # S3 Configuration (for testing)
      AWS_S3_BUCKET_NAME: ${AWS_S3_BUCKET_NAME:-biosensor-test-bucket}
      AWS_S3_PRESIGNED_URL_EXPIRY: ${AWS_S3_PRESIGNED_URL_EXPIRY:-3600}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-development-secret-key-change-in-production-12345}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      JWT_REFRESH_TOKEN_EXPIRE_HOURS: ${JWT_REFRESH_TOKEN_EXPIRE_HOURS:-24}
      
      # Application Configuration
      APP_NAME: ${APP_NAME:-Biosensor API}
      APP_VERSION: ${APP_VERSION:-0.1.0}
      DEBUG: ${DEBUG:-true}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # API Configuration
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
      
      # CORS Configuration
      CORS_ALLOW_ORIGINS: ${CORS_ALLOW_ORIGINS:-*}
      CORS_ALLOW_CREDENTIALS: ${CORS_ALLOW_CREDENTIALS:-true}
      CORS_ALLOW_METHODS: ${CORS_ALLOW_METHODS:-*}
      CORS_ALLOW_HEADERS: ${CORS_ALLOW_HEADERS:-*}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    command: ["/bin/uv", "run", "server"]

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
